package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/eternal-flame-AD/gopheR/rcflags"
)

var (
	flagOutput  = flag.String("o", "rcflags.go", "output file")
	flagPackage = flag.String("p", "main", "package name")
)

func main() {
	flag.Parse()

	outF, err := os.Create(*flagOutput)
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}

	cflags, ldflags := rcflags.QueryRFlags()

	fmt.Fprintf(outF, "//go:build cgo\n\n")
	fmt.Fprintf(outF, "// Code generated by rcflags; DO NOT EDIT.\n\n")
	fmt.Fprintf(outF, "package %s\n\n", *flagPackage)
	fmt.Fprintf(outF, "// #cgo CFLAGS: %s\n", strings.Join(cflags, " "))
	fmt.Fprintf(outF, "// #cgo LDFLAGS: %s\n", strings.Join(ldflags, " "))
	fmt.Fprintf(outF, "// #define R_NO_REMAP\n")
	fmt.Fprintf(outF, "// #include <R.h>\n")
	fmt.Fprintf(outF, "// #include <Rinternals.h>\n")
	fmt.Fprintf(outF, "import \"C\"\n")

}
